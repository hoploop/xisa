/**
 * API
 *
 * Contact: dp@x-force.example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { Detector } from '../model/models';
import { DetectorClassListResponse } from '../model/models';
import { DetectorImage } from '../model/models';
import { DetectorImageLabel } from '../model/models';
import { DetectorImageLabelAdd } from '../model/models';
import { DetectorImageLabelListResponse } from '../model/models';
import { DetectorImageListResponse } from '../model/models';
import { DetectorImageMode } from '../model/models';
import { DetectorListResponse } from '../model/models';
import { HTTPValidationError } from '../model/models';


import { Configuration }                                     from '../configuration';



export interface DetectorServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * Class Count
     * 
     * @param id 
     */
    detectorClassCountId(id: string, extraHttpRequestParams?: any): Observable<number>;

    /**
     * Class List
     * 
     * @param id 
     * @param skip 
     * @param limit 
     * @param search 
     */
    detectorClassListId(id: string, skip?: number, limit?: number, search?: string, extraHttpRequestParams?: any): Observable<DetectorClassListResponse>;

    /**
     * Count
     * 
     * @param projectId 
     */
    detectorCountProjectId(projectId: string, extraHttpRequestParams?: any): Observable<number>;

    /**
     * Create
     * Creates a new detector
     * @param projectId 
     * @param name 
     * @param origin 
     * @param description 
     */
    detectorCreateProjectId(projectId: string, name: string, origin?: string, description?: string, extraHttpRequestParams?: any): Observable<Detector>;

    /**
     * Frame Upload
     * Uploads an image from a recording frame to a detector
     * @param recordId 
     * @param id 
     * @param frame 
     * @param detectorImageMode 
     */
    detectorFrameUpload(recordId: string, id: string, frame: number, detectorImageMode: Array<DetectorImageMode>, extraHttpRequestParams?: any): Observable<Array<DetectorImage>>;

    /**
     * Image Count
     * 
     * @param id 
     */
    detectorImageCountId(id: string, extraHttpRequestParams?: any): Observable<number>;

    /**
     * Image Label Add
     * Adds a label to an image of a detector
     * @param detectorImageLabelAdd 
     */
    detectorImageLabelAdd(detectorImageLabelAdd: DetectorImageLabelAdd, extraHttpRequestParams?: any): Observable<DetectorImageLabel>;

    /**
     * Image List
     * 
     * @param imageId 
     */
    detectorImageLabelCountImageId(imageId: string, extraHttpRequestParams?: any): Observable<number>;

    /**
     * Image Label List
     * 
     * @param imageId 
     * @param skip 
     * @param limit 
     * @param search 
     */
    detectorImageLabelListImageId(imageId: string, skip?: number, limit?: number, search?: string, extraHttpRequestParams?: any): Observable<DetectorImageLabelListResponse>;

    /**
     * Image Label Remove
     * Removes a label to an image of a detector
     * @param id 
     */
    detectorImageLabelRemove(id: string, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Image List
     * 
     * @param id 
     * @param skip 
     * @param limit 
     */
    detectorImageListId(id: string, skip?: number, limit?: number, extraHttpRequestParams?: any): Observable<DetectorImageListResponse>;

    /**
     * Image Remove
     * Performs the removal of a Detector Image
     * @param image 
     */
    detectorImageRemove(image: string, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Image Upload
     * Uploads an image to a detector
     * @param id 
     * @param data 
     * @param detectorImageMode 
     */
    detectorImageUpload(id: string, data: string, detectorImageMode: Array<DetectorImageMode>, extraHttpRequestParams?: any): Observable<Array<DetectorImage>>;

    /**
     * List
     * 
     * @param projectId 
     * @param skip 
     * @param limit 
     * @param search 
     */
    detectorListProjectId(projectId: string, skip?: number, limit?: number, search?: string, extraHttpRequestParams?: any): Observable<DetectorListResponse>;

    /**
     * Load
     * Performs the loading of a Detector
     * @param id 
     */
    detectorLoadId(id: string, extraHttpRequestParams?: any): Observable<Detector>;

    /**
     * Remove
     * Performs the removal of a Detector
     * @param detector 
     */
    detectorRemove(detector: string, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Train
     * Trains a detector
     * @param id 
     * @param epoch 
     * @param size 
     */
    detectorTrainId(id: string, epoch?: number, size?: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Update
     * 
     * @param id 
     * @param name 
     * @param description 
     */
    detectorUpdate(id: string, name: string, description: string, extraHttpRequestParams?: any): Observable<Detector>;

}
