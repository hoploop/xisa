/**
 * API
 *
 * Contact: dp@x-force.example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { DetectObject } from '../model/models';
import { DetectText } from '../model/models';
import { Detector } from '../model/models';
import { DetectorImage } from '../model/models';
import { DetectorImageLabel } from '../model/models';
import { DetectorImageLabelAdd } from '../model/models';
import { DetectorImageLabelListResponse } from '../model/models';
import { DetectorImageListResponse } from '../model/models';
import { DetectorImageMode } from '../model/models';
import { DetectorLabel } from '../model/models';
import { DetectorLabelListResponse } from '../model/models';
import { DetectorListResponse } from '../model/models';
import { DetectorObjectsPayload } from '../model/models';
import { DetectorSuggestion } from '../model/models';
import { DetectorTextsPayload } from '../model/models';
import { HTTPValidationError } from '../model/models';


import { Configuration }                                     from '../configuration';



export interface DetectorServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * Count
     * 
     * @param projectId 
     */
    detectorCount(projectId: string, extraHttpRequestParams?: any): Observable<number>;

    /**
     * Create
     * Creates a new detector
     * @param projectId 
     * @param name 
     * @param origin 
     * @param description 
     */
    detectorCreate(projectId: string, name: string, origin?: string, description?: string, extraHttpRequestParams?: any): Observable<Detector>;

    /**
     * Frame Suggestions
     * Performs the detection of suggestions from recording frame image
     * @param detectorId 
     * @param eventId 
     * @param confidence 
     */
    detectorFrameSuggestions(detectorId: string, eventId: string, confidence: number, extraHttpRequestParams?: any): Observable<Array<DetectorSuggestion>>;

    /**
     * Frame Texts
     * Performs the detection of texts from recording frame image
     * @param recordId 
     * @param frame 
     * @param confidence 
     */
    detectorFrameTexts(recordId: string, frame: number, confidence: number, extraHttpRequestParams?: any): Observable<Array<DetectText>>;

    /**
     * Frame Upload
     * Uploads an image from a recording frame to a detector
     * @param recordId 
     * @param detectorId 
     * @param frame 
     * @param detectorImageMode 
     */
    detectorFrameUpload(recordId: string, detectorId: string, frame: number, detectorImageMode: Array<DetectorImageMode>, extraHttpRequestParams?: any): Observable<Array<DetectorImage>>;

    /**
     * Image Count
     * 
     * @param detectorId 
     */
    detectorImageCount(detectorId: string, extraHttpRequestParams?: any): Observable<number>;

    /**
     * Image Label Add
     * Adds a label to an image of a detector
     * @param detectorImageLabelAdd 
     */
    detectorImageLabelAdd(detectorImageLabelAdd: DetectorImageLabelAdd, extraHttpRequestParams?: any): Observable<DetectorImageLabel>;

    /**
     * Image Label Count
     * 
     * @param imageId 
     */
    detectorImageLabelCount(imageId: string, extraHttpRequestParams?: any): Observable<number>;

    /**
     * Image Label List
     * 
     * @param imageId 
     * @param skip 
     * @param limit 
     * @param search 
     */
    detectorImageLabelList(imageId: string, skip?: number, limit?: number, search?: string, extraHttpRequestParams?: any): Observable<DetectorImageLabelListResponse>;

    /**
     * Image Label Remove
     * Removes a label to an image of a detector
     * @param labelId 
     */
    detectorImageLabelRemove(labelId: string, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Image List
     * 
     * @param detectorId 
     * @param skip 
     * @param limit 
     */
    detectorImageList(detectorId: string, skip?: number, limit?: number, extraHttpRequestParams?: any): Observable<DetectorImageListResponse>;

    /**
     * Image Remove
     * Performs the removal of a Detector Image
     * @param imageId 
     */
    detectorImageRemove(imageId: string, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Image Upload
     * Uploads an image to a detector
     * @param detectorId 
     * @param data 
     * @param detectorImageMode 
     */
    detectorImageUpload(detectorId: string, data: string, detectorImageMode: Array<DetectorImageMode>, extraHttpRequestParams?: any): Observable<Array<DetectorImage>>;

    /**
     * Label
     * 
     * @param detectorId 
     * @param name 
     */
    detectorLabel(detectorId: string, name: string, extraHttpRequestParams?: any): Observable<DetectorLabel>;

    /**
     * Label Add
     * 
     * @param detectorId 
     * @param name 
     */
    detectorLabelAdd(detectorId: string, name: string, extraHttpRequestParams?: any): Observable<DetectorLabel>;

    /**
     * Label Count
     * 
     * @param detectorId 
     */
    detectorLabelCount(detectorId: string, extraHttpRequestParams?: any): Observable<number>;

    /**
     * Label Exists
     * 
     * @param detectorId 
     * @param name 
     */
    detectorLabelExists(detectorId: string, name: string, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Label List
     * 
     * @param detectorId 
     * @param skip 
     * @param limit 
     * @param search 
     */
    detectorLabelList(detectorId: string, skip?: number, limit?: number, search?: string, extraHttpRequestParams?: any): Observable<DetectorLabelListResponse>;

    /**
     * List
     * 
     * @param projectId 
     * @param skip 
     * @param limit 
     * @param search 
     */
    detectorList(projectId: string, skip?: number, limit?: number, search?: string, extraHttpRequestParams?: any): Observable<DetectorListResponse>;

    /**
     * Load
     * Performs the loading of a Detector
     * @param detectorId 
     */
    detectorLoad(detectorId: string, extraHttpRequestParams?: any): Observable<Detector>;

    /**
     * Objects
     * Performs the detection of objects from base64 image
     * @param detectorId 
     * @param detectorObjectsPayload 
     */
    detectorObjects(detectorId: string, detectorObjectsPayload: DetectorObjectsPayload, extraHttpRequestParams?: any): Observable<Array<DetectObject>>;

    /**
     * Objects From Frame
     * Performs the detection of objects from recording frame image
     * @param recordId 
     * @param detectorId 
     * @param frame 
     * @param confidence 
     */
    detectorObjectsFromFrame(recordId: string, detectorId: string, frame: number, confidence: number, extraHttpRequestParams?: any): Observable<Array<DetectObject>>;

    /**
     * Remove
     * Performs the removal of a Detector
     * @param detectorId 
     */
    detectorRemove(detectorId: string, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Texts
     * Performs the detection of texts from base64 image
     * @param detectorTextsPayload 
     */
    detectorTexts(detectorTextsPayload: DetectorTextsPayload, extraHttpRequestParams?: any): Observable<Array<DetectText>>;

    /**
     * Train
     * Trains a detector
     * @param detectorId 
     * @param epochs 
     * @param size 
     */
    detectorTrain(detectorId: string, epochs?: number, size?: number, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Update
     * 
     * @param detectorId 
     * @param name 
     * @param description 
     */
    detectorUpdate(detectorId: string, name: string, description: string, extraHttpRequestParams?: any): Observable<Detector>;

}
