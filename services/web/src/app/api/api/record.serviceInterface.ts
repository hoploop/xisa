/**
 * API
 *
 * Contact: dp@x-force.example.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { HttpHeaders }                                       from '@angular/common/http';

import { Observable }                                        from 'rxjs';

import { HTTPValidationError } from '../model/models';
import { Record } from '../model/models';
import { RecordEventListRecordId200ResponseInner } from '../model/models';
import { RecordListResponse } from '../model/models';


import { Configuration }                                     from '../configuration';



export interface RecordServiceInterface {
    defaultHeaders: HttpHeaders;
    configuration: Configuration;

    /**
     * Edit
     * 
     * @param id 
     * @param name 
     * @param description 
     */
    recordEdit(id: string, name: string, description: string, extraHttpRequestParams?: any): Observable<Record>;

    /**
     * Event List
     * List events in the recording
     * @param recordId 
     */
    recordEventListRecordId(recordId: string, extraHttpRequestParams?: any): Observable<Array<RecordEventListRecordId200ResponseInner>>;

    /**
     * Event Count
     * Counts how many events in the recording
     * @param recordId 
     */
    recordEventsCountRecordId(recordId: string, extraHttpRequestParams?: any): Observable<number>;

    /**
     * Frame Count
     * Counts how many frames in the recording
     * @param recordId 
     */
    recordFrameCountRecordId(recordId: string, extraHttpRequestParams?: any): Observable<number>;

    /**
     * Frame
     * API endpoint to serve a specific frame.
     * @param recordId 
     * @param frameNumber 
     */
    recordFrameRecordIdFrameNumber(recordId: string, frameNumber: number, extraHttpRequestParams?: any): Observable<any>;

    /**
     * List
     * 
     * @param projectId 
     * @param skip 
     * @param limit 
     * @param search 
     */
    recordListProjectId(projectId: string, skip?: number, limit?: number, search?: string, extraHttpRequestParams?: any): Observable<RecordListResponse>;

    /**
     * Load
     * 
     * @param id 
     */
    recordLoadId(id: string, extraHttpRequestParams?: any): Observable<Record>;

    /**
     * Stop
     * Performs the removal of a Recording
     * @param record 
     */
    recordRemove(record: string, extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Running
     * Checks if a recorder is running
     */
    recordRunning(extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Size
     * Size in bytes of the recording
     * @param recordId 
     */
    recordSizeRecordId(recordId: string, extraHttpRequestParams?: any): Observable<number>;

    /**
     * Start
     * Performs the start of a new Recording
     * @param project 
     * @param name 
     * @param description 
     */
    recordStart(project: string, name: string, description?: string, extraHttpRequestParams?: any): Observable<Record>;

    /**
     * Stop
     * Performs the stop of a Recording
     */
    recordStop(extraHttpRequestParams?: any): Observable<boolean>;

    /**
     * Video
     * 
     * @param videoId 
     */
    recordVideoVideoId(videoId: string, extraHttpRequestParams?: any): Observable<any>;

}
