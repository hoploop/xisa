// Generated from Grammar.g4 by ANTLR 4.13.2
// noinspection ES6UnusedImports,JSUnusedGlobalSymbols,JSUnusedLocalSymbols
import {
	ATN,
	ATNDeserializer,
	CharStream,
	DecisionState, DFA,
	Lexer,
	LexerATNSimulator,
	RuleContext,
	PredictionContextCache,
	Token
} from "antlr4";
export default class GrammarLexer extends Lexer {
	public static readonly LEFT = 1;
	public static readonly RIGHT = 2;
	public static readonly MIDDLE = 3;
	public static readonly KEY_PRESS = 4;
	public static readonly KEY_TYPE = 5;
	public static readonly KEY_RELEASE = 6;
	public static readonly MOUSE_CLICK = 7;
	public static readonly MOUSE_DOUBLE_CLICK = 8;
	public static readonly MOUSE_PRESS = 9;
	public static readonly MOUSE_RELEASE = 10;
	public static readonly MOUSE_SCROLL = 11;
	public static readonly WAIT = 12;
	public static readonly TEXT = 13;
	public static readonly POSITION = 14;
	public static readonly REGEX = 15;
	public static readonly COMMA = 16;
	public static readonly DCOMMA = 17;
	public static readonly LABEL = 18;
	public static readonly USE = 19;
	public static readonly SEQUENCE = 20;
	public static readonly DETECTOR = 21;
	public static readonly ID = 22;
	public static readonly STRING = 23;
	public static readonly ESC = 24;
	public static readonly ORPAR = 25;
	public static readonly EQ = 26;
	public static readonly CRPAR = 27;
	public static readonly OCPAR = 28;
	public static readonly CCPAR = 29;
	public static readonly INT = 30;
	public static readonly FLOAT = 31;
	public static readonly WS = 32;
	public static readonly EOF = Token.EOF;

	public static readonly channelNames: string[] = [ "DEFAULT_TOKEN_CHANNEL", "HIDDEN" ];
	public static readonly literalNames: (string | null)[] = [ null, "'left'", 
                                                            "'right'", "'middle'", 
                                                            "'keyPress'", 
                                                            "'keyType'", 
                                                            "'keyRelease'", 
                                                            "'mouseClick'", 
                                                            "'mouseDoubleClick'", 
                                                            "'mousePress'", 
                                                            "'mouseRelease'", 
                                                            "'mouseScroll'", 
                                                            "'wait'", "'text'", 
                                                            "'position'", 
                                                            "'regex'", "','", 
                                                            "';'", "'label'", 
                                                            "'use'", "'sequence'", 
                                                            "'detector'", 
                                                            null, null, 
                                                            null, "'('", 
                                                            "'='", "')'", 
                                                            "'{'", "'}'" ];
	public static readonly symbolicNames: (string | null)[] = [ null, "LEFT", 
                                                             "RIGHT", "MIDDLE", 
                                                             "KEY_PRESS", 
                                                             "KEY_TYPE", 
                                                             "KEY_RELEASE", 
                                                             "MOUSE_CLICK", 
                                                             "MOUSE_DOUBLE_CLICK", 
                                                             "MOUSE_PRESS", 
                                                             "MOUSE_RELEASE", 
                                                             "MOUSE_SCROLL", 
                                                             "WAIT", "TEXT", 
                                                             "POSITION", 
                                                             "REGEX", "COMMA", 
                                                             "DCOMMA", "LABEL", 
                                                             "USE", "SEQUENCE", 
                                                             "DETECTOR", 
                                                             "ID", "STRING", 
                                                             "ESC", "ORPAR", 
                                                             "EQ", "CRPAR", 
                                                             "OCPAR", "CCPAR", 
                                                             "INT", "FLOAT", 
                                                             "WS" ];
	public static readonly modeNames: string[] = [ "DEFAULT_MODE", ];

	public static readonly ruleNames: string[] = [
		"LEFT", "RIGHT", "MIDDLE", "KEY_PRESS", "KEY_TYPE", "KEY_RELEASE", "MOUSE_CLICK", 
		"MOUSE_DOUBLE_CLICK", "MOUSE_PRESS", "MOUSE_RELEASE", "MOUSE_SCROLL", 
		"WAIT", "TEXT", "POSITION", "REGEX", "COMMA", "DCOMMA", "LABEL", "USE", 
		"SEQUENCE", "DETECTOR", "ID", "STRING", "ESC", "ORPAR", "EQ", "CRPAR", 
		"OCPAR", "CCPAR", "INT", "FLOAT", "WS",
	];


	constructor(input: CharStream) {
		super(input);
		this._interp = new LexerATNSimulator(this, GrammarLexer._ATN, GrammarLexer.DecisionsToDFA, new PredictionContextCache());
	}

	public get grammarFileName(): string { return "Grammar.g4"; }

	public get literalNames(): (string | null)[] { return GrammarLexer.literalNames; }
	public get symbolicNames(): (string | null)[] { return GrammarLexer.symbolicNames; }
	public get ruleNames(): string[] { return GrammarLexer.ruleNames; }

	public get serializedATN(): number[] { return GrammarLexer._serializedATN; }

	public get channelNames(): string[] { return GrammarLexer.channelNames; }

	public get modeNames(): string[] { return GrammarLexer.modeNames; }

	public static readonly _serializedATN: number[] = [4,0,32,287,6,-1,2,0,
	7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,
	7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,
	16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,
	2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,
	31,7,31,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,
	1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
	1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,
	1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,
	1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,
	1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,
	10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,
	1,12,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,
	14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,
	1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,20,1,20,1,
	20,1,20,1,20,1,20,1,20,1,21,4,21,234,8,21,11,21,12,21,235,1,21,5,21,239,
	8,21,10,21,12,21,242,9,21,1,22,1,22,1,22,5,22,247,8,22,10,22,12,22,250,
	9,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,
	28,1,28,1,29,4,29,268,8,29,11,29,12,29,269,1,30,3,30,273,8,30,1,30,1,30,
	4,30,277,8,30,11,30,12,30,278,1,31,4,31,282,8,31,11,31,12,31,283,1,31,1,
	31,0,0,32,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
	13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,
	25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,1,0,6,2,0,65,90,97,122,3,0,
	48,57,65,90,97,122,4,0,10,10,13,13,34,34,92,92,7,0,34,34,92,92,98,98,102,
	102,110,110,114,114,116,116,1,0,48,57,3,0,9,10,13,13,32,32,294,0,1,1,0,
	0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,
	0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,
	0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,
	0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,
	0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,
	0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,1,65,1,0,0,0,3,70,1,0,0,0,
	5,76,1,0,0,0,7,83,1,0,0,0,9,92,1,0,0,0,11,100,1,0,0,0,13,111,1,0,0,0,15,
	122,1,0,0,0,17,139,1,0,0,0,19,150,1,0,0,0,21,163,1,0,0,0,23,175,1,0,0,0,
	25,180,1,0,0,0,27,185,1,0,0,0,29,194,1,0,0,0,31,200,1,0,0,0,33,202,1,0,
	0,0,35,204,1,0,0,0,37,210,1,0,0,0,39,214,1,0,0,0,41,223,1,0,0,0,43,233,
	1,0,0,0,45,243,1,0,0,0,47,253,1,0,0,0,49,256,1,0,0,0,51,258,1,0,0,0,53,
	260,1,0,0,0,55,262,1,0,0,0,57,264,1,0,0,0,59,267,1,0,0,0,61,272,1,0,0,0,
	63,281,1,0,0,0,65,66,5,108,0,0,66,67,5,101,0,0,67,68,5,102,0,0,68,69,5,
	116,0,0,69,2,1,0,0,0,70,71,5,114,0,0,71,72,5,105,0,0,72,73,5,103,0,0,73,
	74,5,104,0,0,74,75,5,116,0,0,75,4,1,0,0,0,76,77,5,109,0,0,77,78,5,105,0,
	0,78,79,5,100,0,0,79,80,5,100,0,0,80,81,5,108,0,0,81,82,5,101,0,0,82,6,
	1,0,0,0,83,84,5,107,0,0,84,85,5,101,0,0,85,86,5,121,0,0,86,87,5,80,0,0,
	87,88,5,114,0,0,88,89,5,101,0,0,89,90,5,115,0,0,90,91,5,115,0,0,91,8,1,
	0,0,0,92,93,5,107,0,0,93,94,5,101,0,0,94,95,5,121,0,0,95,96,5,84,0,0,96,
	97,5,121,0,0,97,98,5,112,0,0,98,99,5,101,0,0,99,10,1,0,0,0,100,101,5,107,
	0,0,101,102,5,101,0,0,102,103,5,121,0,0,103,104,5,82,0,0,104,105,5,101,
	0,0,105,106,5,108,0,0,106,107,5,101,0,0,107,108,5,97,0,0,108,109,5,115,
	0,0,109,110,5,101,0,0,110,12,1,0,0,0,111,112,5,109,0,0,112,113,5,111,0,
	0,113,114,5,117,0,0,114,115,5,115,0,0,115,116,5,101,0,0,116,117,5,67,0,
	0,117,118,5,108,0,0,118,119,5,105,0,0,119,120,5,99,0,0,120,121,5,107,0,
	0,121,14,1,0,0,0,122,123,5,109,0,0,123,124,5,111,0,0,124,125,5,117,0,0,
	125,126,5,115,0,0,126,127,5,101,0,0,127,128,5,68,0,0,128,129,5,111,0,0,
	129,130,5,117,0,0,130,131,5,98,0,0,131,132,5,108,0,0,132,133,5,101,0,0,
	133,134,5,67,0,0,134,135,5,108,0,0,135,136,5,105,0,0,136,137,5,99,0,0,137,
	138,5,107,0,0,138,16,1,0,0,0,139,140,5,109,0,0,140,141,5,111,0,0,141,142,
	5,117,0,0,142,143,5,115,0,0,143,144,5,101,0,0,144,145,5,80,0,0,145,146,
	5,114,0,0,146,147,5,101,0,0,147,148,5,115,0,0,148,149,5,115,0,0,149,18,
	1,0,0,0,150,151,5,109,0,0,151,152,5,111,0,0,152,153,5,117,0,0,153,154,5,
	115,0,0,154,155,5,101,0,0,155,156,5,82,0,0,156,157,5,101,0,0,157,158,5,
	108,0,0,158,159,5,101,0,0,159,160,5,97,0,0,160,161,5,115,0,0,161,162,5,
	101,0,0,162,20,1,0,0,0,163,164,5,109,0,0,164,165,5,111,0,0,165,166,5,117,
	0,0,166,167,5,115,0,0,167,168,5,101,0,0,168,169,5,83,0,0,169,170,5,99,0,
	0,170,171,5,114,0,0,171,172,5,111,0,0,172,173,5,108,0,0,173,174,5,108,0,
	0,174,22,1,0,0,0,175,176,5,119,0,0,176,177,5,97,0,0,177,178,5,105,0,0,178,
	179,5,116,0,0,179,24,1,0,0,0,180,181,5,116,0,0,181,182,5,101,0,0,182,183,
	5,120,0,0,183,184,5,116,0,0,184,26,1,0,0,0,185,186,5,112,0,0,186,187,5,
	111,0,0,187,188,5,115,0,0,188,189,5,105,0,0,189,190,5,116,0,0,190,191,5,
	105,0,0,191,192,5,111,0,0,192,193,5,110,0,0,193,28,1,0,0,0,194,195,5,114,
	0,0,195,196,5,101,0,0,196,197,5,103,0,0,197,198,5,101,0,0,198,199,5,120,
	0,0,199,30,1,0,0,0,200,201,5,44,0,0,201,32,1,0,0,0,202,203,5,59,0,0,203,
	34,1,0,0,0,204,205,5,108,0,0,205,206,5,97,0,0,206,207,5,98,0,0,207,208,
	5,101,0,0,208,209,5,108,0,0,209,36,1,0,0,0,210,211,5,117,0,0,211,212,5,
	115,0,0,212,213,5,101,0,0,213,38,1,0,0,0,214,215,5,115,0,0,215,216,5,101,
	0,0,216,217,5,113,0,0,217,218,5,117,0,0,218,219,5,101,0,0,219,220,5,110,
	0,0,220,221,5,99,0,0,221,222,5,101,0,0,222,40,1,0,0,0,223,224,5,100,0,0,
	224,225,5,101,0,0,225,226,5,116,0,0,226,227,5,101,0,0,227,228,5,99,0,0,
	228,229,5,116,0,0,229,230,5,111,0,0,230,231,5,114,0,0,231,42,1,0,0,0,232,
	234,7,0,0,0,233,232,1,0,0,0,234,235,1,0,0,0,235,233,1,0,0,0,235,236,1,0,
	0,0,236,240,1,0,0,0,237,239,7,1,0,0,238,237,1,0,0,0,239,242,1,0,0,0,240,
	238,1,0,0,0,240,241,1,0,0,0,241,44,1,0,0,0,242,240,1,0,0,0,243,248,5,34,
	0,0,244,247,3,47,23,0,245,247,8,2,0,0,246,244,1,0,0,0,246,245,1,0,0,0,247,
	250,1,0,0,0,248,246,1,0,0,0,248,249,1,0,0,0,249,251,1,0,0,0,250,248,1,0,
	0,0,251,252,5,34,0,0,252,46,1,0,0,0,253,254,5,92,0,0,254,255,7,3,0,0,255,
	48,1,0,0,0,256,257,5,40,0,0,257,50,1,0,0,0,258,259,5,61,0,0,259,52,1,0,
	0,0,260,261,5,41,0,0,261,54,1,0,0,0,262,263,5,123,0,0,263,56,1,0,0,0,264,
	265,5,125,0,0,265,58,1,0,0,0,266,268,7,4,0,0,267,266,1,0,0,0,268,269,1,
	0,0,0,269,267,1,0,0,0,269,270,1,0,0,0,270,60,1,0,0,0,271,273,7,4,0,0,272,
	271,1,0,0,0,272,273,1,0,0,0,273,274,1,0,0,0,274,276,5,46,0,0,275,277,7,
	4,0,0,276,275,1,0,0,0,277,278,1,0,0,0,278,276,1,0,0,0,278,279,1,0,0,0,279,
	62,1,0,0,0,280,282,7,5,0,0,281,280,1,0,0,0,282,283,1,0,0,0,283,281,1,0,
	0,0,283,284,1,0,0,0,284,285,1,0,0,0,285,286,6,31,0,0,286,64,1,0,0,0,9,0,
	235,240,246,248,269,272,278,283,1,6,0,0];

	private static __ATN: ATN;
	public static get _ATN(): ATN {
		if (!GrammarLexer.__ATN) {
			GrammarLexer.__ATN = new ATNDeserializer().deserialize(GrammarLexer._serializedATN);
		}

		return GrammarLexer.__ATN;
	}


	static DecisionsToDFA = GrammarLexer._ATN.decisionToState.map( (ds: DecisionState, index: number) => new DFA(ds, index) );
}