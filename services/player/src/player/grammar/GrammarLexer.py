# Generated from Grammar.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,27,237,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,
        1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,
        1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,5,1,5,
        1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
        1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,
        1,11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
        1,13,1,13,1,13,1,13,1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,15,1,15,
        1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,18,
        1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,18,1,19,4,19,197,8,19,11,19,
        12,19,198,1,19,5,19,202,8,19,10,19,12,19,205,9,19,1,20,1,20,1,20,
        5,20,210,8,20,10,20,12,20,213,9,20,1,20,1,20,1,21,1,21,1,21,1,22,
        1,22,1,23,1,23,1,24,1,24,1,25,4,25,227,8,25,11,25,12,25,228,1,26,
        4,26,232,8,26,11,26,12,26,233,1,26,1,26,0,0,27,1,1,3,2,5,3,7,4,9,
        5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,
        33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,
        1,0,6,2,0,65,90,97,122,3,0,48,57,65,90,97,122,4,0,10,10,13,13,34,
        34,92,92,7,0,34,34,92,92,98,98,102,102,110,110,114,114,116,116,1,
        0,48,57,3,0,9,10,13,13,32,32,242,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,
        0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,
        0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,
        0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,
        0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,
        0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,1,55,1,0,0,
        0,3,60,1,0,0,0,5,66,1,0,0,0,7,73,1,0,0,0,9,82,1,0,0,0,11,93,1,0,
        0,0,13,101,1,0,0,0,15,112,1,0,0,0,17,125,1,0,0,0,19,137,1,0,0,0,
        21,142,1,0,0,0,23,147,1,0,0,0,25,153,1,0,0,0,27,161,1,0,0,0,29,167,
        1,0,0,0,31,169,1,0,0,0,33,176,1,0,0,0,35,182,1,0,0,0,37,186,1,0,
        0,0,39,196,1,0,0,0,41,206,1,0,0,0,43,216,1,0,0,0,45,219,1,0,0,0,
        47,221,1,0,0,0,49,223,1,0,0,0,51,226,1,0,0,0,53,231,1,0,0,0,55,56,
        5,108,0,0,56,57,5,101,0,0,57,58,5,102,0,0,58,59,5,116,0,0,59,2,1,
        0,0,0,60,61,5,114,0,0,61,62,5,105,0,0,62,63,5,103,0,0,63,64,5,104,
        0,0,64,65,5,116,0,0,65,4,1,0,0,0,66,67,5,109,0,0,67,68,5,105,0,0,
        68,69,5,100,0,0,69,70,5,100,0,0,70,71,5,108,0,0,71,72,5,101,0,0,
        72,6,1,0,0,0,73,74,5,107,0,0,74,75,5,101,0,0,75,76,5,121,0,0,76,
        77,5,80,0,0,77,78,5,114,0,0,78,79,5,101,0,0,79,80,5,115,0,0,80,81,
        5,115,0,0,81,8,1,0,0,0,82,83,5,107,0,0,83,84,5,101,0,0,84,85,5,121,
        0,0,85,86,5,82,0,0,86,87,5,101,0,0,87,88,5,108,0,0,88,89,5,101,0,
        0,89,90,5,97,0,0,90,91,5,115,0,0,91,92,5,101,0,0,92,10,1,0,0,0,93,
        94,5,107,0,0,94,95,5,101,0,0,95,96,5,121,0,0,96,97,5,84,0,0,97,98,
        5,121,0,0,98,99,5,112,0,0,99,100,5,101,0,0,100,12,1,0,0,0,101,102,
        5,109,0,0,102,103,5,111,0,0,103,104,5,117,0,0,104,105,5,115,0,0,
        105,106,5,101,0,0,106,107,5,80,0,0,107,108,5,114,0,0,108,109,5,101,
        0,0,109,110,5,115,0,0,110,111,5,115,0,0,111,14,1,0,0,0,112,113,5,
        109,0,0,113,114,5,111,0,0,114,115,5,117,0,0,115,116,5,115,0,0,116,
        117,5,101,0,0,117,118,5,82,0,0,118,119,5,101,0,0,119,120,5,108,0,
        0,120,121,5,101,0,0,121,122,5,97,0,0,122,123,5,115,0,0,123,124,5,
        101,0,0,124,16,1,0,0,0,125,126,5,109,0,0,126,127,5,111,0,0,127,128,
        5,117,0,0,128,129,5,115,0,0,129,130,5,101,0,0,130,131,5,83,0,0,131,
        132,5,99,0,0,132,133,5,114,0,0,133,134,5,111,0,0,134,135,5,108,0,
        0,135,136,5,108,0,0,136,18,1,0,0,0,137,138,5,119,0,0,138,139,5,97,
        0,0,139,140,5,105,0,0,140,141,5,116,0,0,141,20,1,0,0,0,142,143,5,
        116,0,0,143,144,5,101,0,0,144,145,5,120,0,0,145,146,5,116,0,0,146,
        22,1,0,0,0,147,148,5,114,0,0,148,149,5,101,0,0,149,150,5,103,0,0,
        150,151,5,101,0,0,151,152,5,120,0,0,152,24,1,0,0,0,153,154,5,114,
        0,0,154,155,5,101,0,0,155,156,5,103,0,0,156,157,5,101,0,0,157,158,
        5,120,0,0,158,159,5,101,0,0,159,160,5,115,0,0,160,26,1,0,0,0,161,
        162,5,116,0,0,162,163,5,101,0,0,163,164,5,120,0,0,164,165,5,116,
        0,0,165,166,5,115,0,0,166,28,1,0,0,0,167,168,5,44,0,0,168,30,1,0,
        0,0,169,170,5,108,0,0,170,171,5,97,0,0,171,172,5,98,0,0,172,173,
        5,101,0,0,173,174,5,108,0,0,174,175,5,115,0,0,175,32,1,0,0,0,176,
        177,5,108,0,0,177,178,5,97,0,0,178,179,5,98,0,0,179,180,5,101,0,
        0,180,181,5,108,0,0,181,34,1,0,0,0,182,183,5,117,0,0,183,184,5,115,
        0,0,184,185,5,101,0,0,185,36,1,0,0,0,186,187,5,100,0,0,187,188,5,
        101,0,0,188,189,5,116,0,0,189,190,5,101,0,0,190,191,5,99,0,0,191,
        192,5,116,0,0,192,193,5,111,0,0,193,194,5,114,0,0,194,38,1,0,0,0,
        195,197,7,0,0,0,196,195,1,0,0,0,197,198,1,0,0,0,198,196,1,0,0,0,
        198,199,1,0,0,0,199,203,1,0,0,0,200,202,7,1,0,0,201,200,1,0,0,0,
        202,205,1,0,0,0,203,201,1,0,0,0,203,204,1,0,0,0,204,40,1,0,0,0,205,
        203,1,0,0,0,206,211,5,34,0,0,207,210,3,43,21,0,208,210,8,2,0,0,209,
        207,1,0,0,0,209,208,1,0,0,0,210,213,1,0,0,0,211,209,1,0,0,0,211,
        212,1,0,0,0,212,214,1,0,0,0,213,211,1,0,0,0,214,215,5,34,0,0,215,
        42,1,0,0,0,216,217,5,92,0,0,217,218,7,3,0,0,218,44,1,0,0,0,219,220,
        5,40,0,0,220,46,1,0,0,0,221,222,5,61,0,0,222,48,1,0,0,0,223,224,
        5,41,0,0,224,50,1,0,0,0,225,227,7,4,0,0,226,225,1,0,0,0,227,228,
        1,0,0,0,228,226,1,0,0,0,228,229,1,0,0,0,229,52,1,0,0,0,230,232,7,
        5,0,0,231,230,1,0,0,0,232,233,1,0,0,0,233,231,1,0,0,0,233,234,1,
        0,0,0,234,235,1,0,0,0,235,236,6,26,0,0,236,54,1,0,0,0,7,0,198,203,
        209,211,228,233,1,6,0,0
    ]

class GrammarLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    LEFT = 1
    RIGHT = 2
    MIDDLE = 3
    KEY_PRESS = 4
    KEY_RELEASE = 5
    KEY_TYPE = 6
    MOUSE_PRESS = 7
    MOUSE_RELEASE = 8
    MOUSE_SCROLL = 9
    WAIT = 10
    TEXT = 11
    REGEX = 12
    REGEXES = 13
    TEXTS = 14
    COMMA = 15
    LABELS = 16
    LABEL = 17
    USE = 18
    DETECTOR = 19
    ID = 20
    STRING = 21
    ESC = 22
    ORPAR = 23
    EQ = 24
    CRPAR = 25
    INT = 26
    WS = 27

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'left'", "'right'", "'middle'", "'keyPress'", "'keyRelease'", 
            "'keyType'", "'mousePress'", "'mouseRelease'", "'mouseScroll'", 
            "'wait'", "'text'", "'regex'", "'regexes'", "'texts'", "','", 
            "'labels'", "'label'", "'use'", "'detector'", "'('", "'='", 
            "')'" ]

    symbolicNames = [ "<INVALID>",
            "LEFT", "RIGHT", "MIDDLE", "KEY_PRESS", "KEY_RELEASE", "KEY_TYPE", 
            "MOUSE_PRESS", "MOUSE_RELEASE", "MOUSE_SCROLL", "WAIT", "TEXT", 
            "REGEX", "REGEXES", "TEXTS", "COMMA", "LABELS", "LABEL", "USE", 
            "DETECTOR", "ID", "STRING", "ESC", "ORPAR", "EQ", "CRPAR", "INT", 
            "WS" ]

    ruleNames = [ "LEFT", "RIGHT", "MIDDLE", "KEY_PRESS", "KEY_RELEASE", 
                  "KEY_TYPE", "MOUSE_PRESS", "MOUSE_RELEASE", "MOUSE_SCROLL", 
                  "WAIT", "TEXT", "REGEX", "REGEXES", "TEXTS", "COMMA", 
                  "LABELS", "LABEL", "USE", "DETECTOR", "ID", "STRING", 
                  "ESC", "ORPAR", "EQ", "CRPAR", "INT", "WS" ]

    grammarFileName = "Grammar.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


