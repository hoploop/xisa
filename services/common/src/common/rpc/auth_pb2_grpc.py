# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from common.rpc import auth_pb2 as common_dot_rpc_dot_auth__pb2
from common.rpc import base_pb2 as common_dot_rpc_dot_base__pb2

GRPC_GENERATED_VERSION = '1.67.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in common/rpc/auth_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class AuthStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ping = channel.unary_unary(
                '/Auth/ping',
                request_serializer=common_dot_rpc_dot_base__pb2.Ping.SerializeToString,
                response_deserializer=common_dot_rpc_dot_base__pb2.Pong.FromString,
                _registered_method=True)
        self.check = channel.unary_unary(
                '/Auth/check',
                request_serializer=common_dot_rpc_dot_auth__pb2.CheckRequest.SerializeToString,
                response_deserializer=common_dot_rpc_dot_auth__pb2.CheckResponse.FromString,
                _registered_method=True)
        self.login = channel.unary_unary(
                '/Auth/login',
                request_serializer=common_dot_rpc_dot_auth__pb2.LoginRequest.SerializeToString,
                response_deserializer=common_dot_rpc_dot_auth__pb2.LoginResponse.FromString,
                _registered_method=True)
        self.user = channel.unary_unary(
                '/Auth/user',
                request_serializer=common_dot_rpc_dot_auth__pb2.UserRequest.SerializeToString,
                response_deserializer=common_dot_rpc_dot_auth__pb2.UserResponse.FromString,
                _registered_method=True)
        self.logout = channel.unary_unary(
                '/Auth/logout',
                request_serializer=common_dot_rpc_dot_auth__pb2.LogoutRequest.SerializeToString,
                response_deserializer=common_dot_rpc_dot_auth__pb2.LogoutResponse.FromString,
                _registered_method=True)
        self.register = channel.unary_unary(
                '/Auth/register',
                request_serializer=common_dot_rpc_dot_auth__pb2.RegisterRequest.SerializeToString,
                response_deserializer=common_dot_rpc_dot_auth__pb2.RegisterResponse.FromString,
                _registered_method=True)
        self.unregister = channel.unary_unary(
                '/Auth/unregister',
                request_serializer=common_dot_rpc_dot_auth__pb2.UnregisterRequest.SerializeToString,
                response_deserializer=common_dot_rpc_dot_auth__pb2.UnregisterResponse.FromString,
                _registered_method=True)
        self.resetPassword = channel.unary_unary(
                '/Auth/resetPassword',
                request_serializer=common_dot_rpc_dot_auth__pb2.ResetPasswordRequest.SerializeToString,
                response_deserializer=common_dot_rpc_dot_auth__pb2.ResetPasswordResponse.FromString,
                _registered_method=True)


class AuthServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ping(self, request, context):
        """Performs synchronous ping of service
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def check(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def login(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def user(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def logout(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def register(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def unregister(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def resetPassword(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AuthServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ping': grpc.unary_unary_rpc_method_handler(
                    servicer.ping,
                    request_deserializer=common_dot_rpc_dot_base__pb2.Ping.FromString,
                    response_serializer=common_dot_rpc_dot_base__pb2.Pong.SerializeToString,
            ),
            'check': grpc.unary_unary_rpc_method_handler(
                    servicer.check,
                    request_deserializer=common_dot_rpc_dot_auth__pb2.CheckRequest.FromString,
                    response_serializer=common_dot_rpc_dot_auth__pb2.CheckResponse.SerializeToString,
            ),
            'login': grpc.unary_unary_rpc_method_handler(
                    servicer.login,
                    request_deserializer=common_dot_rpc_dot_auth__pb2.LoginRequest.FromString,
                    response_serializer=common_dot_rpc_dot_auth__pb2.LoginResponse.SerializeToString,
            ),
            'user': grpc.unary_unary_rpc_method_handler(
                    servicer.user,
                    request_deserializer=common_dot_rpc_dot_auth__pb2.UserRequest.FromString,
                    response_serializer=common_dot_rpc_dot_auth__pb2.UserResponse.SerializeToString,
            ),
            'logout': grpc.unary_unary_rpc_method_handler(
                    servicer.logout,
                    request_deserializer=common_dot_rpc_dot_auth__pb2.LogoutRequest.FromString,
                    response_serializer=common_dot_rpc_dot_auth__pb2.LogoutResponse.SerializeToString,
            ),
            'register': grpc.unary_unary_rpc_method_handler(
                    servicer.register,
                    request_deserializer=common_dot_rpc_dot_auth__pb2.RegisterRequest.FromString,
                    response_serializer=common_dot_rpc_dot_auth__pb2.RegisterResponse.SerializeToString,
            ),
            'unregister': grpc.unary_unary_rpc_method_handler(
                    servicer.unregister,
                    request_deserializer=common_dot_rpc_dot_auth__pb2.UnregisterRequest.FromString,
                    response_serializer=common_dot_rpc_dot_auth__pb2.UnregisterResponse.SerializeToString,
            ),
            'resetPassword': grpc.unary_unary_rpc_method_handler(
                    servicer.resetPassword,
                    request_deserializer=common_dot_rpc_dot_auth__pb2.ResetPasswordRequest.FromString,
                    response_serializer=common_dot_rpc_dot_auth__pb2.ResetPasswordResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Auth', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('Auth', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Auth(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Auth/ping',
            common_dot_rpc_dot_base__pb2.Ping.SerializeToString,
            common_dot_rpc_dot_base__pb2.Pong.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def check(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Auth/check',
            common_dot_rpc_dot_auth__pb2.CheckRequest.SerializeToString,
            common_dot_rpc_dot_auth__pb2.CheckResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Auth/login',
            common_dot_rpc_dot_auth__pb2.LoginRequest.SerializeToString,
            common_dot_rpc_dot_auth__pb2.LoginResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def user(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Auth/user',
            common_dot_rpc_dot_auth__pb2.UserRequest.SerializeToString,
            common_dot_rpc_dot_auth__pb2.UserResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def logout(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Auth/logout',
            common_dot_rpc_dot_auth__pb2.LogoutRequest.SerializeToString,
            common_dot_rpc_dot_auth__pb2.LogoutResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Auth/register',
            common_dot_rpc_dot_auth__pb2.RegisterRequest.SerializeToString,
            common_dot_rpc_dot_auth__pb2.RegisterResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def unregister(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Auth/unregister',
            common_dot_rpc_dot_auth__pb2.UnregisterRequest.SerializeToString,
            common_dot_rpc_dot_auth__pb2.UnregisterResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def resetPassword(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Auth/resetPassword',
            common_dot_rpc_dot_auth__pb2.ResetPasswordRequest.SerializeToString,
            common_dot_rpc_dot_auth__pb2.ResetPasswordResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
