# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

from common.rpc import base_pb2 as common_dot_rpc_dot_base__pb2
from common.rpc import recorder_pb2 as common_dot_rpc_dot_recorder__pb2

GRPC_GENERATED_VERSION = '1.67.1'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in common/rpc/recorder_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class RecorderStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ping = channel.unary_unary(
                '/Recorder/ping',
                request_serializer=common_dot_rpc_dot_base__pb2.Ping.SerializeToString,
                response_deserializer=common_dot_rpc_dot_base__pb2.Pong.FromString,
                _registered_method=True)
        self.running = channel.unary_unary(
                '/Recorder/running',
                request_serializer=common_dot_rpc_dot_recorder__pb2.RunningRequest.SerializeToString,
                response_deserializer=common_dot_rpc_dot_recorder__pb2.RunningResponse.FromString,
                _registered_method=True)
        self.loadRecord = channel.unary_unary(
                '/Recorder/loadRecord',
                request_serializer=common_dot_rpc_dot_recorder__pb2.LoadRecordRequest.SerializeToString,
                response_deserializer=common_dot_rpc_dot_recorder__pb2.LoadRecordResponse.FromString,
                _registered_method=True)
        self.updateRecord = channel.unary_unary(
                '/Recorder/updateRecord',
                request_serializer=common_dot_rpc_dot_recorder__pb2.UpdateRecordRequest.SerializeToString,
                response_deserializer=common_dot_rpc_dot_recorder__pb2.UpdateRecordResponse.FromString,
                _registered_method=True)
        self.listRecord = channel.unary_unary(
                '/Recorder/listRecord',
                request_serializer=common_dot_rpc_dot_recorder__pb2.ListRecordRequest.SerializeToString,
                response_deserializer=common_dot_rpc_dot_recorder__pb2.ListRecordResponse.FromString,
                _registered_method=True)
        self.deleteRecord = channel.unary_unary(
                '/Recorder/deleteRecord',
                request_serializer=common_dot_rpc_dot_recorder__pb2.DeleteRecordRequest.SerializeToString,
                response_deserializer=common_dot_rpc_dot_recorder__pb2.DeleteRecordResponse.FromString,
                _registered_method=True)
        self.countRecord = channel.unary_unary(
                '/Recorder/countRecord',
                request_serializer=common_dot_rpc_dot_recorder__pb2.CountRecordRequest.SerializeToString,
                response_deserializer=common_dot_rpc_dot_recorder__pb2.CountRecordResponse.FromString,
                _registered_method=True)
        self.startRecord = channel.unary_unary(
                '/Recorder/startRecord',
                request_serializer=common_dot_rpc_dot_recorder__pb2.StartRecordRequest.SerializeToString,
                response_deserializer=common_dot_rpc_dot_recorder__pb2.StartRecordResponse.FromString,
                _registered_method=True)
        self.stopRecord = channel.unary_unary(
                '/Recorder/stopRecord',
                request_serializer=common_dot_rpc_dot_recorder__pb2.StopRecordRequest.SerializeToString,
                response_deserializer=common_dot_rpc_dot_recorder__pb2.StopRecordResponse.FromString,
                _registered_method=True)
        self.sizeRecord = channel.unary_unary(
                '/Recorder/sizeRecord',
                request_serializer=common_dot_rpc_dot_recorder__pb2.SizeRecordRequest.SerializeToString,
                response_deserializer=common_dot_rpc_dot_recorder__pb2.SizeRecordResponse.FromString,
                _registered_method=True)
        self.countRecordEvent = channel.unary_unary(
                '/Recorder/countRecordEvent',
                request_serializer=common_dot_rpc_dot_recorder__pb2.CountRecordEventRequest.SerializeToString,
                response_deserializer=common_dot_rpc_dot_recorder__pb2.CountRecordEventResponse.FromString,
                _registered_method=True)
        self.listRecordEvent = channel.unary_unary(
                '/Recorder/listRecordEvent',
                request_serializer=common_dot_rpc_dot_recorder__pb2.ListRecordEventRequest.SerializeToString,
                response_deserializer=common_dot_rpc_dot_recorder__pb2.ListRecordEventResponse.FromString,
                _registered_method=True)
        self.countRecordFrame = channel.unary_unary(
                '/Recorder/countRecordFrame',
                request_serializer=common_dot_rpc_dot_recorder__pb2.CountRecordFrameRequest.SerializeToString,
                response_deserializer=common_dot_rpc_dot_recorder__pb2.CountRecordFrameResponse.FromString,
                _registered_method=True)
        self.loadRecordFrame = channel.unary_unary(
                '/Recorder/loadRecordFrame',
                request_serializer=common_dot_rpc_dot_recorder__pb2.LoadRecordFrameRequest.SerializeToString,
                response_deserializer=common_dot_rpc_dot_recorder__pb2.LoadRecordFrameResponse.FromString,
                _registered_method=True)
        self.loadRecordFrameBase64 = channel.unary_unary(
                '/Recorder/loadRecordFrameBase64',
                request_serializer=common_dot_rpc_dot_recorder__pb2.LoadRecordFrameBase64Request.SerializeToString,
                response_deserializer=common_dot_rpc_dot_recorder__pb2.LoadRecordFrameBase64Response.FromString,
                _registered_method=True)
        self.streamRecordVideo = channel.unary_stream(
                '/Recorder/streamRecordVideo',
                request_serializer=common_dot_rpc_dot_recorder__pb2.StreamRecordVideoRequest.SerializeToString,
                response_deserializer=common_dot_rpc_dot_recorder__pb2.StreamRecordVideoResponse.FromString,
                _registered_method=True)
        self.streamRangeRecordVideo = channel.unary_unary(
                '/Recorder/streamRangeRecordVideo',
                request_serializer=common_dot_rpc_dot_recorder__pb2.StreamRangeRecordVideoRequest.SerializeToString,
                response_deserializer=common_dot_rpc_dot_recorder__pb2.StreamRangeRecordVideoResponse.FromString,
                _registered_method=True)
        self.sizeRecordVideo = channel.unary_unary(
                '/Recorder/sizeRecordVideo',
                request_serializer=common_dot_rpc_dot_recorder__pb2.SizeRecordVideoRequest.SerializeToString,
                response_deserializer=common_dot_rpc_dot_recorder__pb2.SizeRecordVideoResponse.FromString,
                _registered_method=True)
        self.loadEvent = channel.unary_unary(
                '/Recorder/loadEvent',
                request_serializer=common_dot_rpc_dot_recorder__pb2.LoadEventRequest.SerializeToString,
                response_deserializer=common_dot_rpc_dot_recorder__pb2.LoadEventResponse.FromString,
                _registered_method=True)


class RecorderServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ping(self, request, context):
        """Performs synchronous ping of service
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def running(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def loadRecord(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updateRecord(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def listRecord(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deleteRecord(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def countRecord(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startRecord(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def stopRecord(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def sizeRecord(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def countRecordEvent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def listRecordEvent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def countRecordFrame(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def loadRecordFrame(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def loadRecordFrameBase64(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def streamRecordVideo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def streamRangeRecordVideo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def sizeRecordVideo(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def loadEvent(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RecorderServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ping': grpc.unary_unary_rpc_method_handler(
                    servicer.ping,
                    request_deserializer=common_dot_rpc_dot_base__pb2.Ping.FromString,
                    response_serializer=common_dot_rpc_dot_base__pb2.Pong.SerializeToString,
            ),
            'running': grpc.unary_unary_rpc_method_handler(
                    servicer.running,
                    request_deserializer=common_dot_rpc_dot_recorder__pb2.RunningRequest.FromString,
                    response_serializer=common_dot_rpc_dot_recorder__pb2.RunningResponse.SerializeToString,
            ),
            'loadRecord': grpc.unary_unary_rpc_method_handler(
                    servicer.loadRecord,
                    request_deserializer=common_dot_rpc_dot_recorder__pb2.LoadRecordRequest.FromString,
                    response_serializer=common_dot_rpc_dot_recorder__pb2.LoadRecordResponse.SerializeToString,
            ),
            'updateRecord': grpc.unary_unary_rpc_method_handler(
                    servicer.updateRecord,
                    request_deserializer=common_dot_rpc_dot_recorder__pb2.UpdateRecordRequest.FromString,
                    response_serializer=common_dot_rpc_dot_recorder__pb2.UpdateRecordResponse.SerializeToString,
            ),
            'listRecord': grpc.unary_unary_rpc_method_handler(
                    servicer.listRecord,
                    request_deserializer=common_dot_rpc_dot_recorder__pb2.ListRecordRequest.FromString,
                    response_serializer=common_dot_rpc_dot_recorder__pb2.ListRecordResponse.SerializeToString,
            ),
            'deleteRecord': grpc.unary_unary_rpc_method_handler(
                    servicer.deleteRecord,
                    request_deserializer=common_dot_rpc_dot_recorder__pb2.DeleteRecordRequest.FromString,
                    response_serializer=common_dot_rpc_dot_recorder__pb2.DeleteRecordResponse.SerializeToString,
            ),
            'countRecord': grpc.unary_unary_rpc_method_handler(
                    servicer.countRecord,
                    request_deserializer=common_dot_rpc_dot_recorder__pb2.CountRecordRequest.FromString,
                    response_serializer=common_dot_rpc_dot_recorder__pb2.CountRecordResponse.SerializeToString,
            ),
            'startRecord': grpc.unary_unary_rpc_method_handler(
                    servicer.startRecord,
                    request_deserializer=common_dot_rpc_dot_recorder__pb2.StartRecordRequest.FromString,
                    response_serializer=common_dot_rpc_dot_recorder__pb2.StartRecordResponse.SerializeToString,
            ),
            'stopRecord': grpc.unary_unary_rpc_method_handler(
                    servicer.stopRecord,
                    request_deserializer=common_dot_rpc_dot_recorder__pb2.StopRecordRequest.FromString,
                    response_serializer=common_dot_rpc_dot_recorder__pb2.StopRecordResponse.SerializeToString,
            ),
            'sizeRecord': grpc.unary_unary_rpc_method_handler(
                    servicer.sizeRecord,
                    request_deserializer=common_dot_rpc_dot_recorder__pb2.SizeRecordRequest.FromString,
                    response_serializer=common_dot_rpc_dot_recorder__pb2.SizeRecordResponse.SerializeToString,
            ),
            'countRecordEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.countRecordEvent,
                    request_deserializer=common_dot_rpc_dot_recorder__pb2.CountRecordEventRequest.FromString,
                    response_serializer=common_dot_rpc_dot_recorder__pb2.CountRecordEventResponse.SerializeToString,
            ),
            'listRecordEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.listRecordEvent,
                    request_deserializer=common_dot_rpc_dot_recorder__pb2.ListRecordEventRequest.FromString,
                    response_serializer=common_dot_rpc_dot_recorder__pb2.ListRecordEventResponse.SerializeToString,
            ),
            'countRecordFrame': grpc.unary_unary_rpc_method_handler(
                    servicer.countRecordFrame,
                    request_deserializer=common_dot_rpc_dot_recorder__pb2.CountRecordFrameRequest.FromString,
                    response_serializer=common_dot_rpc_dot_recorder__pb2.CountRecordFrameResponse.SerializeToString,
            ),
            'loadRecordFrame': grpc.unary_unary_rpc_method_handler(
                    servicer.loadRecordFrame,
                    request_deserializer=common_dot_rpc_dot_recorder__pb2.LoadRecordFrameRequest.FromString,
                    response_serializer=common_dot_rpc_dot_recorder__pb2.LoadRecordFrameResponse.SerializeToString,
            ),
            'loadRecordFrameBase64': grpc.unary_unary_rpc_method_handler(
                    servicer.loadRecordFrameBase64,
                    request_deserializer=common_dot_rpc_dot_recorder__pb2.LoadRecordFrameBase64Request.FromString,
                    response_serializer=common_dot_rpc_dot_recorder__pb2.LoadRecordFrameBase64Response.SerializeToString,
            ),
            'streamRecordVideo': grpc.unary_stream_rpc_method_handler(
                    servicer.streamRecordVideo,
                    request_deserializer=common_dot_rpc_dot_recorder__pb2.StreamRecordVideoRequest.FromString,
                    response_serializer=common_dot_rpc_dot_recorder__pb2.StreamRecordVideoResponse.SerializeToString,
            ),
            'streamRangeRecordVideo': grpc.unary_unary_rpc_method_handler(
                    servicer.streamRangeRecordVideo,
                    request_deserializer=common_dot_rpc_dot_recorder__pb2.StreamRangeRecordVideoRequest.FromString,
                    response_serializer=common_dot_rpc_dot_recorder__pb2.StreamRangeRecordVideoResponse.SerializeToString,
            ),
            'sizeRecordVideo': grpc.unary_unary_rpc_method_handler(
                    servicer.sizeRecordVideo,
                    request_deserializer=common_dot_rpc_dot_recorder__pb2.SizeRecordVideoRequest.FromString,
                    response_serializer=common_dot_rpc_dot_recorder__pb2.SizeRecordVideoResponse.SerializeToString,
            ),
            'loadEvent': grpc.unary_unary_rpc_method_handler(
                    servicer.loadEvent,
                    request_deserializer=common_dot_rpc_dot_recorder__pb2.LoadEventRequest.FromString,
                    response_serializer=common_dot_rpc_dot_recorder__pb2.LoadEventResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Recorder', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('Recorder', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class Recorder(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ping(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Recorder/ping',
            common_dot_rpc_dot_base__pb2.Ping.SerializeToString,
            common_dot_rpc_dot_base__pb2.Pong.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def running(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Recorder/running',
            common_dot_rpc_dot_recorder__pb2.RunningRequest.SerializeToString,
            common_dot_rpc_dot_recorder__pb2.RunningResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def loadRecord(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Recorder/loadRecord',
            common_dot_rpc_dot_recorder__pb2.LoadRecordRequest.SerializeToString,
            common_dot_rpc_dot_recorder__pb2.LoadRecordResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def updateRecord(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Recorder/updateRecord',
            common_dot_rpc_dot_recorder__pb2.UpdateRecordRequest.SerializeToString,
            common_dot_rpc_dot_recorder__pb2.UpdateRecordResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def listRecord(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Recorder/listRecord',
            common_dot_rpc_dot_recorder__pb2.ListRecordRequest.SerializeToString,
            common_dot_rpc_dot_recorder__pb2.ListRecordResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def deleteRecord(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Recorder/deleteRecord',
            common_dot_rpc_dot_recorder__pb2.DeleteRecordRequest.SerializeToString,
            common_dot_rpc_dot_recorder__pb2.DeleteRecordResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def countRecord(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Recorder/countRecord',
            common_dot_rpc_dot_recorder__pb2.CountRecordRequest.SerializeToString,
            common_dot_rpc_dot_recorder__pb2.CountRecordResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def startRecord(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Recorder/startRecord',
            common_dot_rpc_dot_recorder__pb2.StartRecordRequest.SerializeToString,
            common_dot_rpc_dot_recorder__pb2.StartRecordResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def stopRecord(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Recorder/stopRecord',
            common_dot_rpc_dot_recorder__pb2.StopRecordRequest.SerializeToString,
            common_dot_rpc_dot_recorder__pb2.StopRecordResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def sizeRecord(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Recorder/sizeRecord',
            common_dot_rpc_dot_recorder__pb2.SizeRecordRequest.SerializeToString,
            common_dot_rpc_dot_recorder__pb2.SizeRecordResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def countRecordEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Recorder/countRecordEvent',
            common_dot_rpc_dot_recorder__pb2.CountRecordEventRequest.SerializeToString,
            common_dot_rpc_dot_recorder__pb2.CountRecordEventResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def listRecordEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Recorder/listRecordEvent',
            common_dot_rpc_dot_recorder__pb2.ListRecordEventRequest.SerializeToString,
            common_dot_rpc_dot_recorder__pb2.ListRecordEventResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def countRecordFrame(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Recorder/countRecordFrame',
            common_dot_rpc_dot_recorder__pb2.CountRecordFrameRequest.SerializeToString,
            common_dot_rpc_dot_recorder__pb2.CountRecordFrameResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def loadRecordFrame(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Recorder/loadRecordFrame',
            common_dot_rpc_dot_recorder__pb2.LoadRecordFrameRequest.SerializeToString,
            common_dot_rpc_dot_recorder__pb2.LoadRecordFrameResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def loadRecordFrameBase64(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Recorder/loadRecordFrameBase64',
            common_dot_rpc_dot_recorder__pb2.LoadRecordFrameBase64Request.SerializeToString,
            common_dot_rpc_dot_recorder__pb2.LoadRecordFrameBase64Response.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def streamRecordVideo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(
            request,
            target,
            '/Recorder/streamRecordVideo',
            common_dot_rpc_dot_recorder__pb2.StreamRecordVideoRequest.SerializeToString,
            common_dot_rpc_dot_recorder__pb2.StreamRecordVideoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def streamRangeRecordVideo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Recorder/streamRangeRecordVideo',
            common_dot_rpc_dot_recorder__pb2.StreamRangeRecordVideoRequest.SerializeToString,
            common_dot_rpc_dot_recorder__pb2.StreamRangeRecordVideoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def sizeRecordVideo(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Recorder/sizeRecordVideo',
            common_dot_rpc_dot_recorder__pb2.SizeRecordVideoRequest.SerializeToString,
            common_dot_rpc_dot_recorder__pb2.SizeRecordVideoResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def loadEvent(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/Recorder/loadEvent',
            common_dot_rpc_dot_recorder__pb2.LoadEventRequest.SerializeToString,
            common_dot_rpc_dot_recorder__pb2.LoadEventResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
